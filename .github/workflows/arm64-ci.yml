name: ARM64 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, dgx_spark ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_hardware_tpm:
        description: 'Test with hardware TPM (requires ARM64 runner with TPM)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      arm64-changed: ${{ steps.changes.outputs.arm64 }}
      core-changed: ${{ steps.changes.outputs.core }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            arm64:
              - 'zero-trust/system-setup-arm64.sh'
              - 'zero-trust/tpm/Makefile'
              - 'docs/arm64-support.md'
              - '.github/workflows/arm64-ci.yml'
            core:
              - 'zero-trust/**'
              - 'compliance_agent/**'
              - 'requirements.txt'

  # Standard x86_64 testing for comparison
  test-x86_64:
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.core-changed == 'true' || github.event_name == 'workflow_dispatch'
    needs: detect-changes
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install x86_64 dependencies
      run: |
        sudo apt update
        sudo apt install -y swtpm tpm2-tools libtss2-dev libssl-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r zero-trust/requirements.txt

    - name: Test TPM functionality (x86_64)
      run: |
        cd zero-trust/tpm
        timeout 30s ./swtpm.sh || true
        sleep 2
        make clean && make
        ./tpm-ek-ak-persist.sh

    - name: Run basic tests
      run: |
        cd zero-trust
        python -m pytest tests/ -v || true

  # ARM64 testing using QEMU emulation
  test-arm64-emulated:
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.arm64-changed == 'true' || needs.detect-changes.outputs.core-changed == 'true' || github.event_name == 'workflow_dispatch'
    needs: detect-changes
    strategy:
      matrix:
        distro: ['ubuntu:22.04', 'fedora:38']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test ARM64 setup in container
      run: |
        cat > Dockerfile.arm64-test << 'EOF'
        FROM --platform=linux/arm64 ${{ matrix.distro }}
        
        # Install basic tools
        RUN if [ -f /etc/redhat-release ]; then \
              dnf update -y && \
              dnf install -y git python3 python3-pip which procps-ng; \
            else \
              apt update && \
              apt install -y git python3 python3-pip build-essential procps; \
            fi

        # Set working directory
        WORKDIR /aegis

        # Copy source code
        COPY . .

        # Test ARM64 detection
        RUN echo "Architecture: $(uname -m)" && \
            echo "OS: $(uname -s)" && \
            [ "$(uname -m)" = "aarch64" ] || exit 1

        # Test ARM64 setup script (dry run mode)
        RUN chmod +x zero-trust/system-setup-arm64.sh && \
            echo "Testing ARM64 setup script syntax..." && \
            bash -n zero-trust/system-setup-arm64.sh

        # Test Makefile ARM64 detection
        RUN cd zero-trust/tpm && \
            make info

        # Install Python dependencies
        RUN pip3 install -r zero-trust/requirements.txt

        # Test basic Python imports
        RUN python3 -c "import cryptography; print('Cryptography version:', cryptography.__version__)" && \
            python3 -c "import OpenSSL; print('pyOpenSSL imported successfully')" && \
            python3 -c "import requests; print('Requests imported successfully')"

        # Create test script
        RUN echo '#!/bin/bash' > /test-arm64.sh && \
            echo 'echo "=== ARM64 Test Results ==="' >> /test-arm64.sh && \
            echo 'echo "Architecture: $(uname -m)"' >> /test-arm64.sh && \
            echo 'echo "Python version: $(python3 --version)"' >> /test-arm64.sh && \
            echo 'echo "Available in PATH:"' >> /test-arm64.sh && \
            echo 'which python3 || echo "python3 not found"' >> /test-arm64.sh && \
            echo 'which pip3 || echo "pip3 not found"' >> /test-arm64.sh && \
            echo 'which git || echo "git not found"' >> /test-arm64.sh && \
            echo 'echo "=== Test completed ==="' >> /test-arm64.sh && \
            chmod +x /test-arm64.sh

        CMD ["/test-arm64.sh"]
        EOF

        docker buildx build \
          --platform linux/arm64 \
          -f Dockerfile.arm64-test \
          -t aegis-arm64-test:${{ matrix.distro }} \
          --load .

        docker run --rm --platform linux/arm64 aegis-arm64-test:${{ matrix.distro }}

  # ARM64 native testing (requires self-hosted ARM64 runner)
  test-arm64-native:
    runs-on: [self-hosted, linux, ARM64]
    if: needs.detect-changes.outputs.arm64-changed == 'true' || github.event_name == 'workflow_dispatch'
    needs: detect-changes
    continue-on-error: true  # Allow failure if no ARM64 runner available
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify ARM64 architecture
      run: |
        echo "Architecture: $(uname -m)"
        echo "OS: $(uname -s)"
        [ "$(uname -m)" = "aarch64" ] || [ "$(uname -m)" = "arm64" ] || exit 1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run ARM64 system setup
      run: |
        chmod +x zero-trust/system-setup-arm64.sh
        # Run in test mode to avoid sudo requirements
        export TEST_MODE=1
        bash -x zero-trust/system-setup-arm64.sh || echo "Setup completed with warnings"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r zero-trust/requirements.txt

    - name: Test ARM64 compilation
      run: |
        cd zero-trust/tpm
        make clean
        make info
        make
        file tpm-app-persist | grep -i arm || file tpm-app-persist | grep -i aarch64

    - name: Test TPM functionality (software TPM)
      run: |
        # Source ARM64 environment if available
        [ -f /etc/profile.d/arm64-tpm-env.sh ] && source /etc/profile.d/arm64-tpm-env.sh || true
        
        cd zero-trust/tpm
        # Start software TPM with timeout
        timeout 30s ./swtpm.sh || echo "SWTPM startup completed"
        
        # Wait for TPM to be ready
        sleep 3
        
        # Test basic TPM operations
        ./tpm-ek-ak-persist.sh || echo "TPM operations completed with warnings"

    - name: Test hardware TPM (if available and requested)
      if: github.event.inputs.test_hardware_tpm == 'true'
      run: |
        if [ -e /dev/tpm0 ]; then
          echo "Hardware TPM detected: /dev/tpm0"
          export TPM2TOOLS_TCTI="device:/dev/tpm0"
          tpm2 getcap properties-fixed || echo "Hardware TPM test failed"
        else
          echo "No hardware TPM found at /dev/tpm0"
        fi

    - name: Run integration tests
      run: |
        cd zero-trust
        # Basic service tests
        python -c "
        import sys
        sys.path.append('.')
        try:
            from agent.app import app
            from collector.app import app as collector_app
            from gateway.app import app as gateway_app
            print('✓ All Flask apps import successfully')
        except Exception as e:
            print(f'✗ Import error: {e}')
            sys.exit(1)
        "

  # Multi-architecture Docker build
  build-docker-multiarch:
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.arm64-changed == 'true' || needs.detect-changes.outputs.core-changed == 'true'
    needs: detect-changes
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create multi-arch Dockerfile
      run: |
        cat > Dockerfile.multiarch << 'EOF'
        FROM python:3.10-slim

        # Install system dependencies based on architecture
        RUN apt-get update && apt-get install -y \
            build-essential \
            git \
            && rm -rf /var/lib/apt/lists/*

        # Set working directory
        WORKDIR /app

        # Copy requirements first for better caching
        COPY zero-trust/requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Make scripts executable
        RUN chmod +x zero-trust/system-setup.sh && \
            chmod +x zero-trust/system-setup-arm64.sh

        # Set architecture-specific environment
        RUN echo "Architecture: $(uname -m)" > /arch.txt

        # Default command
        CMD ["python", "-c", "import platform; print(f'Running on {platform.machine()} architecture')"]
        EOF

    - name: Build and test multi-arch image
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -f Dockerfile.multiarch \
          -t aegis-multiarch:latest \
          --push=false .

  # Performance benchmarking
  benchmark-arm64:
    runs-on: [self-hosted, linux, ARM64]
    if: github.event_name == 'workflow_dispatch'
    needs: [test-arm64-native]
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r zero-trust/requirements.txt
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        cd zero-trust/tpm
        
        # Benchmark compilation
        time make clean
        time make
        
        # Benchmark TPM operations
        echo "Benchmarking TPM operations..."
        time timeout 30s ./swtpm.sh || true
        sleep 2
        time ./tpm-ek-ak-persist.sh || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: arm64-benchmark-results
        path: benchmark-results/

  # Generate summary report
  generate-report:
    runs-on: ubuntu-latest
    needs: [test-x86_64, test-arm64-emulated, test-arm64-native, build-docker-multiarch]
    if: always()
    steps:
    - name: Generate ARM64 compatibility report
      run: |
        cat > arm64-report.md << 'EOF'
        # ARM64 Compatibility Report
        
        ## Test Results Summary
        
        | Test Category | Status | Notes |
        |---------------|--------|-------|
        | x86_64 Baseline | ${{ needs.test-x86_64.result }} | Standard architecture testing |
        | ARM64 Emulated | ${{ needs.test-arm64-emulated.result }} | QEMU emulation testing |
        | ARM64 Native | ${{ needs.test-arm64-native.result }} | Native ARM64 hardware |
        | Multi-arch Build | ${{ needs.build-docker-multiarch.result }} | Docker multi-arch support |
        
        ## Architecture Support Status
        
        - ✅ **x86_64**: Fully supported (baseline)
        - ✅ **ARM64**: Supported with custom compilation
        - ✅ **Multi-arch**: Docker images available
        
        ## Next Steps
        
        1. Deploy ARM64 self-hosted runners for native testing
        2. Optimize compilation time for ARM64 builds  
        3. Create pre-compiled ARM64 packages
        4. Add hardware TPM testing on ARM64 devices
        
        Generated: $(date -u)
        Commit: ${{ github.sha }}
        EOF

    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      with:
        name: arm64-compatibility-report
        path: arm64-report.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('arm64-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ARM64 Compatibility Test Results\n\n${report}`
          });

# Workflow-level settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true