import os
import sys
import yaml

# This block allows the script to be run directly
if __name__ == "__main__" and __package__ is None:
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    sys.path.insert(0, project_root)

from compliance_agent.rules_engine import Rule

class RuleGenerator:
    """
    Generates deterministic Python Rule object definitions from a structured data source.
    """
    def __init__(self, source_file_path):
        """
        Initializes the RuleGenerator with the path to the source data file.
        """
        if not os.path.exists(source_file_path):
            raise FileNotFoundError(f"Source data file not found at {source_file_path}")

        with open(source_file_path, 'r') as f:
            self.requirements = yaml.safe_load(f)

    def generate_rule_code(self):
        """
        Generates Python code for Rule objects based on the loaded requirements.
        """
        code_lines = [
            "# --- Auto-generated Rule Stubs ---",
            "# This code was generated by rule_generator.py. Review and implement the validation logic.",
            ""
        ]

        for req in self.requirements:
            req_id = req['id']
            # Sanitize the ID to create a valid Python variable name
            variable_name = f"rule_pci_dss_{req_id.replace('.', '_')}"

            # Create a user-friendly name from the description
            name = " ".join(req['description'].split()[:4]).replace('"', '') + "..."

            control_mapping = f"PCI DSS Req. {req_id}"

            explanation = req['description']

            code_lines.append(f"{variable_name} = Rule(")
            code_lines.append(f"    name=\"{name}\",")
            code_lines.append(f"    control_mapping=\"{control_mapping}\",")
            code_lines.append(f"    explanation=\"{explanation}\",")
            code_lines.append(f"    # TODO: Implement the validation logic for this rule.")
            code_lines.append(f"    # Recommended evidence sources: {', '.join(req['evidence_sources'])}")
            code_lines.append(f"    validation_logic=lambda log: False # Placeholder logic")
            code_lines.append(")\n")

        return "\n".join(code_lines)

def main():
    """
    Main function to run the rule generator tool.
    """
    print("--- Generating Compliance Rule Stubs ---")

    script_dir = os.path.dirname(os.path.abspath(__file__))
    source_file = os.path.join(script_dir, 'pci_requirements.yaml')

    try:
        generator = RuleGenerator(source_file)
        generated_code = generator.generate_rule_code()

        print("\n--- Generated Python Code ---")
        print("# Copy the following code into compliance_agent/rules_engine.py and implement the logic.")
        print("-" * 30)
        print(generated_code)
        print("-" * 30)

    except (FileNotFoundError, yaml.YAMLError) as e:
        print(f"\nError: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()